#!/usr/bin/env python
PACKAGE = "unav2_hardware"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Encoder
gen.add("cpr",       int_t, 0, "[#] An Integer parameter",        11,  0, 65535)

enc_pos = gen.enum([ gen.const("After",  int_t, 0, "After gears"),
                    gen.const("Before", int_t, 1, "Before gears")],
                    "Position")
gen.add("position", int_t, 0, "Position encoder respect to gears", 1, 0, 1, edit_method=enc_pos)

enc_z_index = gen.enum([ gen.const("NO",  bool_t, False, "Without Z index"),
                    gen.const("YES", bool_t, True, "Z index")],
                    "Z-Index")
gen.add("has_z_index", bool_t, False, "This encoder use the Z index to find 0 position", False, edit_method=enc_z_index)

enc_channel = gen.enum([ gen.const("ONE",  int_t, 1, "Single channel"),
                    gen.const("TWO", int_t, 2, "Two channels")],
                    "Channels")
gen.add("channels", int_t, 0, "How many channel have your encoder", 2, 1, 2, edit_method=enc_channel)
inversion = gen.enum([ gen.const("Normal",  bool_t, False, "Encoder same direction as motor"),
                    gen.const("Inverted", bool_t, True, "Encoder opposite direction as motor")],
                    "Encoder direction inversion")
gen.add("invert0", bool_t, 0, "Invert direction for encoder 0", True, edit_method=inversion)
gen.add("invert1", bool_t, 0, "Invert direction for encoder 1", True, edit_method=inversion)
exit(gen.generate(PACKAGE, "unav_node", "UnavEncoder"))
